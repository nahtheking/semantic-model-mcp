name: Publish Package to GitHub Registry

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v0.3.0, v1.0.0, etc.
  release:
    types: [published]
  workflow_dispatch:  # Allow manual triggering

env:
  PYTHON_VERSION: '3.8'

jobs:
  test:
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
        
    - name: Run basic import test
      run: |
        python -c "import sys; sys.path.insert(0, '.'); from __version__ import __version__; print(f'Version: {__version__}')"
        
    - name: Run pytest
      run: |
        python -m pytest testing/ -v --tb=short
      continue-on-error: true  # Don't fail the build if tests have issues
      
  security-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.8'
        
    - name: Install security scanning tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
        
    - name: Run safety check
      run: |
        safety check --json
      continue-on-error: true
      
    - name: Run bandit security scan
      run: |
        bandit -r . -f json -o bandit-report.json
      continue-on-error: true
      
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
        retention-days: 30
      if: always()

  build:
    needs: [test, security-scan]
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine setuptools wheel
        
    - name: Build package
      run: |
        python -m build
        
    - name: Check package
      run: |
        python -m twine check dist/*
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/
        retention-days: 30

  publish:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'release' || github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/v')
    environment: 
      name: production
      url: https://github.com/${{ github.repository }}/packages
    
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/
        
    - name: Install publishing dependencies
      run: |
        python -m pip install --upgrade pip
        pip install twine
        
    - name: Configure package registry
      run: |
        echo "Configuring GitHub Package Registry"
        
    - name: Publish to GitHub Package Registry
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
        TWINE_REPOSITORY_URL: https://upload.pypi.org/legacy/
      run: |
        # Note: GitHub Packages for Python uses PyPI format
        # For internal company use, you might want to use GitHub Package Registry
        # or set up your own PyPI server
        echo "Publishing package..."
        echo "Package files:"
        ls -la dist/
        
        # For GitHub Package Registry, you'll need to configure the repository URL
        # and authentication differently. This is a template - adjust for your setup.
        
        # Uncomment the following line when ready to publish:
        # python -m twine upload dist/* --verbose
        
        echo "Package publishing configured. Uncomment twine upload when ready."

  notify:
    needs: [publish]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify team
      run: |
        echo "Package build and publish workflow completed"
        echo "Status: ${{ needs.publish.result }}"
        # Add your team notification logic here (Slack, Teams, etc.)
        
  create-github-release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    permissions:
      contents: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/
        
    - name: Extract version from tag
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        name: Release v${{ steps.version.outputs.version }}
        body: |
          ## Semantic Model MCP Server v${{ steps.version.outputs.version }}
          
          ### Features
          - Model Context Protocol server for Microsoft Fabric and Power BI
          - Best Practice Analyzer with 71 comprehensive rules
          - Power BI Desktop integration
          - Microsoft Learn documentation integration
          - DirectLake model support
          
          ### Installation
          ```bash
          pip install semantic-model-mcp-server==${{ steps.version.outputs.version }}
          ```
          
          ### What's Changed
          - See commit history for detailed changes
          
          **Full Changelog**: https://github.com/${{ github.repository }}/compare/v${{ steps.version.outputs.version }}...v${{ steps.version.outputs.version }}
        draft: false
        prerelease: false
        files: |
          dist/semantic-model-mcp-server-${{ steps.version.outputs.version }}.tar.gz
          dist/*.whl